{
  "author_id": 1,
  "name": "RubyJS",
  "category": "Tool",
  "content": "![rjsv_gem_logo](https://github.com/filipvrba/ruby-js/raw/main/public/rjsv_gem.png)\nIt is a tool created in the [Ruby](https://www.ruby-lang.org/en/) scripting language.\nIt enables real-time handling of scripts that have been converted to JavaScript.\nAs a result, whenever a file with the *RJS* extension is saved, RubyJS immediately detects the change and saves it to a *JS* file.\nThis tool's primary purpose is to accomplish this. \n\n- [1 Description](#1-description)\n    - [1.1 Ecosystem](#11-ecosystem)\n    - [1.2 Advanced features](#12-advanced-features)\n- [2 Articles and Links](#2-articles-and-links)\n\n## 1 Description\nThe program makes use of a [Ruby2JS](https://www.ruby2js.com/) transpiler together with a separate module for monitoring file changes.\nThis RubyJS tool was created as a result of the collaboration of these libraries.\nAs long as the virtual environment supports [ECMAScript](https://en.wikipedia.org/wiki/ECMAScript) (JS), it can be utilized practically anyplace.\n\nSeveral [TypeScript](https://www.typescriptlang.org/), [Fable](https://fable.io/), and [CoffeeScript](https://coffeescript.org/) tools are comparable to this one.\nYour preferred scripting syntax may be used to run the supplied command.\nThey only offer a [JavaScript API](https://developer.mozilla.org/en-US/docs/Glossary/API), which is one drawback of these transpiters.\n\n### 1.1 Ecosystem\nJavaScript is the only component of the ecosystem.\nThe Ruby API is therefore not supported.\nYou won't find it here if you're used to using Ruby functions.\nYou can overcome this issue by scripting your preferred functions for ECMAScript.\nPrototyping can be used to accomplish this.\n\n### 1.2 Advanced features\nMore helpful features have been added to the RubyJS tool.\nMaking a project out of scaffolding is a secondary aspect of the strategy.\nThis will make it possible to build a project architecture using the Vite tool quickly.\nThe compilation of all files with the *RJS* extension and subsequent generation by a single *RJS* script are additional tertiary features.\nThe script does not need to be labeled as modular, which is helpful if we wish to send functions from the files to someone in the production version for remote access.\n\n> ### Info\n> The Vite tool that was stated has a RubyJS tool's secondary attribute.\nAs a result, calling it RubyJS-Vite, which you may get online, is appropriate because it is the same program.\nTherefore both RubyJS and RubyJS-Vite are the same tools.\n\n## 2 Articles and Links\nI'll include a few articles or links in this list to further the information.\n\n- Repository: [RubyJS](https://github.com/filipvrba/ruby-js)\n    - Repository for RubyJS tool source code. The project is open-ended and covered by the MIT license. A simple guide to using this tool is also available here. \n- Article: [Godot with Ruby syntax](https://github.com/filipvrba/ruby-js/blob/main/docs/gwrs.md)\n    - What you will learn from this post has to be made clear. You will discover how to create a Godot Editor extension module that runs ECMAScript (JS). You will learn how to use the RubyJS-Vite script translation tool to make the Ruby syntax function.\n- Ruby Gem: [RubyJS Vite](https://rubygems.org/gems/rubyjs-vite)\n    - The Ruby Gem ecosystem's official library.\n"
}